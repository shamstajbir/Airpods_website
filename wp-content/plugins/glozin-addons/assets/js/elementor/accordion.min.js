class GlozinAccordionWidgetHandler extends elementorModules.frontend.handlers
  .Base {
  getDefaultSettings() {
    return {
      selectors: {
        tab: ".glozin-accordion__title",
        panel: ".glozin-accordion__content",
      },
      classes: {
        active: "glozin-tab--active",
        firstActive: "glozin-tab--first-active",
      },
      showFn: "slideDown",
      hideFn: "slideUp",
      autoExpand: false,
      toggleSelf: true,
      hidePrevious: true,
    };
  }
  getDefaultElements() {
    const e = this.getSettings("selectors");
    return {
      $tabs: this.findElement(e.tab),
      $panels: this.findElement(e.panel),
    };
  }
  activateDefaultTab() {
    const e = this.getSettings();
    if (!e.autoExpand || ("editor" === e.autoExpand && !this.isEdit)) {
      return;
    }
    const t = this.getEditSettings("activeItemIndex") || 1,
      s = { showFn: e.showFn, hideFn: e.hideFn };
    this.setSettings({ showFn: "show", hideFn: "hide" });
    this.changeActiveTab(t);
    this.setSettings(s);
  }
  changeActiveTab(e) {
    const t = this.getSettings(),
      s = this.elements.$tabs.filter('[data-tab="' + e + '"]'),
      a = this.elements.$panels.filter('[data-tab="' + e + '"]'),
      n = s.hasClass(t.classes.active);
    if (!t.toggleSelf && n) {
      return;
    }
    if ((t.toggleSelf || !n) && t.hidePrevious) {
      this.elements.$tabs.removeClass(t.classes.active);
      this.elements.$tabs.parent().removeClass(t.classes.active);
      this.elements.$panels.removeClass(t.classes.active)[t.hideFn]();
    }
    if (!t.hidePrevious && n) {
      s.removeClass(t.classes.active);
      s.parent().removeClass(t.classes.active);
      a.removeClass(t.classes.active)[t.hideFn]();
    }
    if (!n) {
      s.addClass(t.classes.active);
      s.parent().addClass(t.classes.active);
      a.addClass(t.classes.active)[t.showFn]();
    }
  }
  bindEvents() {
    this.elements.$tabs.on({
      keydown: (e) => {
        if ("Enter" !== e.key) {
          return;
        }
        e.preventDefault();
        this.changeActiveTab(e.currentTarget.getAttribute("data-tab"));
      },
      click: (e) => {
        e.preventDefault();
        this.changeActiveTab(e.currentTarget.getAttribute("data-tab"));
      },
    });
  }
  onInit() {
    super.onInit();
    this.activateDefaultTab();
    const a = this.getSettings();
    this.elements.$tabs.each((e, t) => {
      const s = jQuery(t);
      if (s.hasClass(a.classes.firstActive)) {
        s.addClass(a.classes.active);
        s.parent().addClass(a.classes.active);
        s.siblings().addClass(a.classes.active)[a.showFn]();
      }
    });
  }
}
jQuery(window).on("elementor/frontend/init", () => {
  elementorFrontend.hooks.addAction(
    "frontend/element_ready/glozin-accordion.default",
    (e) => {
      elementorFrontend.elementsHandler.addHandler(
        GlozinAccordionWidgetHandler,
        { $element: e }
      );
    }
  );
});
